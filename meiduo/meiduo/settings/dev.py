"""
Django settings for meiduo project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '5$tppjt6yr)&c1g%c35mp6-z%2%gq6f&6*p4zu&c9t%!#jdb!3'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meiduo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [os.path.join(BASE_DIR),'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'environment': 'meiduo.utils.jinja2_env.jinja2_environment',
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR), 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meiduo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', # 数据库引擎
        'HOST': '127.0.0.1', # 数据库主机
        'PORT': 3306, # 数据库端口
        'USER': 'root', # 数据库用户名
        'PASSWORD': '123123123', # 数据库用户密码
        'NAME': 'meiduo' # 数据库名
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

CACHES = {
    "default": { # 默认
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": { # session
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

DEBUG = False  #线上环境时要关闭debug
ALLOWED_HOSTS = ['*']   #线上环境时要允许所有ip访问，或有自己的规则


# #  log  首先创建日志存储路径.
import logging
import django.utils.log
import logging.handlers

log_path = os.path.join(BASE_DIR, "logs")
if not os.path.exists(log_path):
    os.makedirs("logs")
# DJANGO_LOG_LEVEL=DEBUG

LOGGING = {
    'version': 1,  # 保留字
    'disable_existing_loggers': False,  # 禁用已经存在的logger实例
    # 日志文件的格式
    'formatters': {
        # 详细的日志格式
        'standard': {
            'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'
                      '[%(levelname)s][%(message)s]'
        },
        # 简单的日志格式
        'simple': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
        # 定义一个特殊的日志格式
        'collect': {
            'format': '%(message)s'
        }
    },
    # 过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 处理器
    'handlers': {
        'console': {  # 在终端打印
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
            'class': 'logging.StreamHandler',  #
            'formatter': 'simple'
        },
        'default': {  # 默认的
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_DIR + '/logs/', "all.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 3,  # 最多备份几个
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'error': {  # 专门用来记错误日志
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_DIR + '/logs/', "error.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'collect': {  # 专门定义一个收集特定信息的日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_DIR + '/logs/', "collect.log"),
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'collect',
            'encoding': "utf-8"
        },
        'scprits_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR + '/logs/', "script.log"),
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
            'formatter': 'standard',
        }
    },
    'loggers': {
        'django': {  # 默认的logger应用如下配置
            'handlers': ['default', 'console', 'error'],  # 上线之后可以把'console'移除
            'level': 'DEBUG',
            'propagate': True,  # 向不向更高级别的logger传递
        },
        'collect': {  # 名为 'collect'的logger还单独处理
            'handlers': ['console', 'collect'],
            'level': 'INFO',
        },
        'scripts': {
            'handlers': ['scprits_handler'],
            'level': 'INFO',
            'propagate': False
        },
    },
}

# 下面就是logging的配置
# LOGGING = {
#     'version': 1,  # 指明dictConnfig的版本，目前就只有一个版本，哈哈
#     'disable_existing_loggers': False,  # 表示是否禁用所有的已经存在的日志配置
#     'formatters': {  # 格式器
#         'verbose': {  # 详细
#             'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
#         },
#         'standard': {  # 标准
#             'format': '[%(asctime)s] [%(levelname)s] %(message)s'
#         },
#     },
#     # handlers：用来定义具体处理日志的方式，可以定义多种，"default"就是默认方式，"console"就是打印到控制台方式。file是写入到文件的方式，注意使用的class不同
#     'handlers': { # 处理器，在这里定义了两个个处理器
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'stream': 'ext://sys.stdout',   # 文件重定向的配置，将打印到控制台的信息都重定向出去 python manage.py runserver >> /home/aea/log/test.log
#             # 'stream': open('/home/aea/log/test.log','a'),  #虽然成功了，但是并没有将所有内容全部写入文件，目前还不清楚为什么
#             'formatter': 'standard'   # 制定输出的格式，注意 在上面的formatters配置里面选择一个，否则会报错
#         },
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename':os.path.join(os.path.dirname(BASE_DIR), 'logs/meiduo.log'), #这是将普通日志写入到日志文件中的方法，
#             'formatter': 'standard'
#         },
#         'default': {
#             'level':'DEBUG',
#             'class':'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(os.path.dirname(BASE_DIR), 'logs/meiduo.log'),     #日志输出文件
#             'maxBytes': 1024*1024*5,                  #文件大小
#             'backupCount': 5,                         #备份份数
#             'formatter':'standard',                   #使用哪种formatters日志格式
#         },
#         # 上面两种写入日志的方法是有区别的，前者是将控制台下输出的内容全部写入到文件中，这样做的好处就是我们在views代码中的所有print也会写在对应的位置
#         # 第二种方法就是将系统内定的内容写入到文件，具体就是请求的地址、错误信息等，小伙伴也可以都使用一下然后查看两个文件的异同。
#     },
#     'loggers': {  # log记录器，配置之后就会对应的输出日志
#         # django 表示就是django本身默认的控制台输出，就是原本在控制台里面输出的内容，在这里的handlers里的file表示写入到上面配置的file-/home/aea/log/jwt_test.log文件里面
#         # 在这里的handlers里的console表示写入到上面配置的console-/home/aea/log/test.log文件里面
#         'django': {
#             'handlers': ['console','file'],
#             # 这里直接输出到控制台只是请求的路由等系统console，当使用重定向之后会把所有内容输出到log日志
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#         'django.request ':{
#             'handlers': ['console','file'],
#             'level': 'WARNING',  # 配合上面的将警告log写入到另外一个文件
#             'propagate': True,
#         },
#         'django.db.backends': {
#             'handlers': ['file'], # 指定file handler处理器，表示只写入到文件
#             'level':'DEBUG',
#             'propagate': True,
#         },
#     },
# }
# # # LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,  # 是否禁用logger，建议设置为False
#     'formatters': {  # 日志格式，提供给handler使用，非必须，如果不设置格式，默认只会打印消息体
#         'verbose': {  # 格式名称
#             # INFO 2018-04-25 15:43:27,586 views 8756 123145350217728 这是一个日志
#             'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
#         },
#         'simple': {
#             # INFO  这是一个日志
#             'format': '%(levelname)s %(message)s'
#         },
#         'standard': {
#             # 2018-04-25 16:40:00,195 [Thread-7:123145575223296] [myapp.log:282] [views:user_query_json_get] [INFO]-
#             # 这是一个日志
#             'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'
#         },
#     },
#     'filters': {  # 过滤器，提供给handler使用，非必须
#         'require_debug_true': {  # 要求DEBUG=True时才打印日志
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#
#     },
#     'handlers': {  # 处理器，设置日志记录方式，必须
#         'console': {  # 处理器名称
#             'level': 'DEBUG',  # 设置级别
#             'filters': ['require_debug_true'],  # 设置过滤器，多个用逗号分割
#             'class': 'logging.StreamHandler',  # 处理器，这里是控制台打印
#             'formatter': 'verbose'  # 设置日志格式
#         },
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',  # 记录到文件
#             'filename': 'E:/log/file.log',
#             'formatter': 'verbose'
#         },
#         'rotatingFile': {
#             'level': 'DEBUG',
#             'class': 'logging.handlers.RotatingFileHandler',  # 按文件大小切割日志
#             # 'filename': 'log/all.log',  # 日志输出文件 默认在当前项目根路径下
#             'filename': 'E:/log/rotatingFile.log',  # 日志输出文件
#             'maxBytes': 1024 * 1024 * 5,  # 每个文件大小
#             'backupCount': 5,  # 保留日志份数，只保留最后5份，如果都保留，设置为0，默认就是0
#             'formatter': 'standard',  # 使用哪种formatters日志格式
#         },
#         'timedRotatingFile': {
#             'level': 'DEBUG',
#             'class': 'logging.handlers.TimedRotatingFileHandler',  # 按时间切割日志
#             'filename': 'E:/log/timedRotatingFile.log',  # 日志输出文件
#             'when': 'D',  # 按天分割
#             'backupCount': 5,  # 保留日志份数，只保留最后5份，如果都保留，设置为0，默认就是0
#             'formatter': 'standard',  # 使用哪种formatters日志格式
#         },
#     },
#     'loggers': {  # 日志记录器
#         'django': {
#             'handlers': ['console'],
#             'propagate': True,
#             'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),  # 只有设置DEBUG = True时，该配置才会打印sql信息
#         },
#         'django.request': {
#             'handlers': ['rotatingFile'],
#             'level': 'ERROR',
#             'propagate': False,  # 设置为False，表示不像其父级别传递日志内容
#         },
#         'myapp.log': {  # 也可以这样创建logger对象，logging.getLogger('myapp.log')
#             'handlers': ['file', 'timedRotatingFile'],
#             'level': 'INFO',  # 这里的日志级别不能低于处理器中设置的日志级别
#         },
#     },
